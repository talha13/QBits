/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package qbits.gui.account;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingWorker;
import qbits.configuration.Utilities;
import qbits.db.MySQLDatabase;
import qbits.db.QueryBuilder;
import qbits.gui.common.UIParentFrame;
import qbits.common.Message;

/**
 *
 * @author Topu
 */
public class UIAccountTransaction extends javax.swing.JPanel {

    private UIParentFrame parentFrame;
    private ButtonGroup clearButtonGroup;
    private HashMap<String, Integer> accounts;

    /**
     * Creates new form UIAccountTransaction
     */
    public UIAccountTransaction(UIParentFrame frame) {
        initComponents();
        parentFrame = frame;
        clearButtonGroup = new ButtonGroup();
        clearButtonGroup.add(rbClear);
        clearButtonGroup.add(rbNotClear);
        accounts = new HashMap<>();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbAccountType = new javax.swing.JComboBox();
        cmbAccount = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        spAmount = new javax.swing.JSpinner();
        cmbTxnType = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        dcTxnDate = new datechooser.beans.DateChooserCombo();
        jLabel5 = new javax.swing.JLabel();
        dcClearOn = new datechooser.beans.DateChooserCombo();
        jLabel6 = new javax.swing.JLabel();
        rbClear = new javax.swing.JRadioButton();
        rbNotClear = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taNotes = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txfVoucherNo = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true), "Account Transaction", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true), "Transaction Infomartion"));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setText("Account Type*");

        cmbAccountType.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbAccountType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Account Type", "Bank", "Cash", "Card" }));
        cmbAccountType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAccountTypeActionPerformed(evt);
            }
        });

        cmbAccount.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setText("Account*");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 0));
        jLabel3.setText("Amount*");

        spAmount.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spAmount.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.5d)));

        cmbTxnType.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbTxnType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Transaction Type", "Deposit", "Withdraw" }));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 0, 0));
        jLabel4.setText("Transaction Type*");

        dcTxnDate.setFieldFont(new java.awt.Font("Times New Roman", java.awt.Font.PLAIN, 14));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 0, 0));
        jLabel5.setText("Date*");

        dcClearOn.setFieldFont(new java.awt.Font("Times New Roman", java.awt.Font.PLAIN, 14));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 0, 0));
        jLabel6.setText("Clear On*");

        rbClear.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        rbClear.setText("Clear");

        rbNotClear.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        rbNotClear.setText("Not Clear");

        taNotes.setColumns(20);
        taNotes.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        taNotes.setRows(5);
        jScrollPane1.setViewportView(taNotes);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 0, 0));
        jLabel7.setText("Status*");

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("Notes");

        txfVoucherNo.setEditable(false);
        txfVoucherNo.setBackground(new java.awt.Color(255, 255, 255));
        txfVoucherNo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setText("Voucher No");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbClear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbNotClear))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(3, 3, 3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAccount, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dcTxnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dcClearOn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTxnType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txfVoucherNo, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cmbAccountType, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txfVoucherNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbAccountType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTxnType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcTxnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcClearOn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbClear)
                    .addComponent(rbNotClear)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap())
        );

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true));

        btnSave.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qbits/resources/image/Save-icon.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qbits/resources/image/Refresh-icon.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnReset))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (!check()) {
            return;
        }

        new SwingWorker<Object, Object>() {
            @Override
            protected Object doInBackground() throws Exception {
                parentFrame.stausBar.startLoading("saving account transaction");
                changeStatus(false);
                return save();
            }

            protected void done() {
                try {

                    parentFrame.stausBar.stopLoading();
                    changeStatus(true);
                    if (Integer.parseInt(get().toString()) == 1) {
                        parentFrame.showMessage("Account transaction saved");
                        reset();
                    } else if (Integer.parseInt(get().toString()) == -1) {
                        parentFrame.showMessage("Unable to save accout transaction");
                    } else if (Integer.parseInt(get().toString()) == -2) {
                        Message.dbConnectFailed();
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(UIAccountTransaction.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    Logger.getLogger(UIAccountTransaction.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.execute();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void cmbAccountTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAccountTypeActionPerformed
        // TODO add your handling code here:

        if (cmbAccountType.getSelectedIndex() == 0) {
            return;
        }

        new SwingWorker<Object, Object>() {
            @Override
            protected Object doInBackground() throws Exception {
                parentFrame.stausBar.startLoading("Loading accounts");
                return loadAccounts(cmbAccountType.getSelectedItem().toString());
            }

            protected void done() {
                try {
                    parentFrame.stausBar.stopLoading();

                    if (Integer.parseInt(get().toString()) == 1) {
                    } else if (Integer.parseInt(get().toString()) == -1) {
                        cmbAccountType.setSelectedIndex(0);
                        parentFrame.showMessage("Unable to load accounts");
                    } else if (Integer.parseInt(get().toString()) == -2) {
                        cmbAccountType.setSelectedIndex(0);
                        Message.dbConnectFailed();
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(UIAccountTransaction.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    Logger.getLogger(UIAccountTransaction.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.execute();
    }//GEN-LAST:event_cmbAccountTypeActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbAccount;
    private javax.swing.JComboBox cmbAccountType;
    private javax.swing.JComboBox cmbTxnType;
    private datechooser.beans.DateChooserCombo dcClearOn;
    private datechooser.beans.DateChooserCombo dcTxnDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbClear;
    private javax.swing.JRadioButton rbNotClear;
    private javax.swing.JSpinner spAmount;
    private javax.swing.JTextArea taNotes;
    private javax.swing.JTextField txfVoucherNo;
    // End of variables declaration//GEN-END:variables

    private void changeStatus(boolean status) {

        txfVoucherNo.setEnabled(status);
        taNotes.setEnabled(status);
        cmbAccount.setEnabled(status);
        cmbAccountType.setEnabled(status);
        cmbTxnType.setEnabled(status);
        rbClear.setEnabled(status);
        rbNotClear.setEnabled(status);
        btnReset.setEnabled(status);
        btnSave.setEnabled(status);
        spAmount.setEnabled(status);
        dcClearOn.setEnabled(status);
        dcTxnDate.setEnabled(status);
    }

    private boolean check() {

        if (cmbAccountType.getSelectedIndex() == 0) {
            parentFrame.showMessage("Please select account type");
            return false;
        }

        if (cmbAccount.getSelectedIndex() == 0) {
            parentFrame.showMessage("Please select account");
            return false;
        }

        if (cmbTxnType.getSelectedIndex() == 0) {
            parentFrame.showMessage("Please select transaction type");
            return false;
        }

        if ((Double) (spAmount.getValue()) <= 0) {
            parentFrame.showMessage("Please select valid amount");
            return false;
        }

        if (!rbClear.isSelected() && !rbNotClear.isSelected()) {
            parentFrame.showMessage("Please select status");
            return false;
        }

        if (!Utilities.isValidString(txfVoucherNo.getText())) {
            parentFrame.showMessage("Please enter voucher no");
            return false;
        }

        return true;
    }

    private int save() {

        MySQLDatabase database = new MySQLDatabase();
        String query;

        if (database.connect()) {

            database.setAutoCommit(false);

            query = "INSERT INTO account_transaction VALUES(null, " + accounts.get(cmbAccount.getSelectedItem().toString()) + ", \"" + txfVoucherNo.getText() + "\""
                    + ", \"" + spAmount.getValue() + "\", \"" + cmbTxnType.getSelectedItem().toString() + "\""
                    + ", \"" + Utilities.dateForDB(dcTxnDate.getSelectedDate().getTime()) + "\", \"" + Utilities.dateForDB(dcClearOn.getSelectedDate().getTime()) + "\""
                    + ", " + rbClear.isSelected() + ", \"" + taNotes.getText() + "\", " + parentFrame.currentUser.getUserID() + ", NOW()"
                    + ")";

            long txnID = database.insert(query);

            if (txnID == -1) {
                database.rollback();
                database.setAutoCommit(true);
                database.disconnect();
                return -1;
            }

            query = "UPDATE voucher_tracker SET count = count + 1 WHERE title =\"account_transaction\"";

            if (database.update(query) <= 0) {
                database.rollback();
                database.setAutoCommit(true);
                database.disconnect();
                return -1;
            }

            database.commit();
            database.setAutoCommit(true);
            database.disconnect();
            return 1;

        } else {
            return -2;
        }
    }

    private void reset() {

        new SwingWorker<Object, Object>() {
            @Override
            protected Object doInBackground() throws Exception {

                cmbAccountType.setSelectedIndex(0);
                cmbAccount.removeAllItems();
                spAmount.setValue(0.0);
                cmbTxnType.setSelectedIndex(0);
                dcTxnDate.setSelectedDate(Calendar.getInstance());
                dcClearOn.setSelectedDate(Calendar.getInstance());
                rbClear.setSelected(true);
                taNotes.setText("");

                parentFrame.stausBar.startLoading("generating voucher no");
                String voucherNo = getVoucherNo();

                if (voucherNo.length() == 0) {
                    return -1;
                } else {
                    txfVoucherNo.setText(voucherNo);
                    return 1;
                }
            }

            protected void done() {
                parentFrame.stausBar.stopLoading();
            }
        }.execute();
    }

    private int loadAccounts(String accountType) {

        MySQLDatabase database = new MySQLDatabase();
        Vector<String> accountTitles = new Vector<>();
        String query;
        accounts.clear();
        accountTitles.add("Select Account");
        int status = -1;

        if (database.connect()) {

            query = "SELECT * FROM account WHERE type =\"" + accountType + "\" AND status = 1 ORDER BY id";

            ResultSet resultSet = database.get(query);

            try {
                while (resultSet.next()) {
                    accounts.put(resultSet.getString("title"), resultSet.getInt("id"));
                    accountTitles.add(resultSet.getString("title"));
                }

                cmbAccount.setModel(new DefaultComboBoxModel(accountTitles));
                status = 1;

            } catch (SQLException ex) {
                Logger.getLogger(UIAccountTransaction.class.getName()).log(Level.SEVERE, null, ex);
                accounts.clear();
                status = -1;
            } finally {
                database.disconnect();
            }

        } else {
            status = -2;
        }

        return status;
    }

    private String getVoucherNo() {

        String voucherType = "account_transaction";
        String query;
        QueryBuilder builder = new QueryBuilder();

        MySQLDatabase database = new MySQLDatabase();

        if (database.connect()) {

//            query = "SELECT count FROM voucher_tracker WHERE title = \"" + voucherType + "\"";

            builder.select("count");
            builder.from("voucher_tracker");
            builder.whereString("title = ", voucherType);

            ResultSet resultSet = database.get(builder.get());

            try {
                if (resultSet.next()) {
                    return "" + (resultSet.getInt("count") + 1);
                } else {
                    parentFrame.showMessage("Unable to generate voucher no");
                    txfVoucherNo.setEditable(true);
                    return "";
                }
            } catch (SQLException ex) {
                Logger.getLogger(UIAccountTransaction.class.getName()).log(Level.SEVERE, null, ex);
                parentFrame.showMessage("Unable to generate voucher no");
                txfVoucherNo.setEditable(true);
                return "";
            } finally {
                database.disconnect();
            }

        } else {
            parentFrame.showMessage("Unable to connect with database");
            txfVoucherNo.setEditable(true);
            return "";
        }
    }
}
