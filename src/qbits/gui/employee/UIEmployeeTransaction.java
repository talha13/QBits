/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package qbits.gui.employee;

import qbits.gui.purchase.*;
import qbits.gui.account.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingWorker;
import qbits.configuration.Utilities;
import qbits.db.MySQLDatabase;
import qbits.db.QueryBuilder;
import qbits.entity.Employee;
import qbits.entity.Salary;
import qbits.gui.common.UIParentFrame;
import qbits.common.Message;

/**
 *
 * @author Topu
 */
public class UIEmployeeTransaction extends javax.swing.JPanel {

    private UIParentFrame parentFrame;
    private ButtonGroup clearButtonGroup;
    private HashMap<String, Integer> accounts;
    private HashMap<String, Integer> accountHead;
    private HashMap<Integer, Employee> employees;
    private HashMap<Integer, Integer> departments;

    /**
     * Creates new form UIAccountTransaction
     */
    public UIEmployeeTransaction(UIParentFrame frame) {
        initComponents();
        parentFrame = frame;
        clearButtonGroup = new ButtonGroup();
        clearButtonGroup.add(rbClear);
        clearButtonGroup.add(rbNotClear);
        accounts = new HashMap<>();
        accountHead = new HashMap<>();
        employees = new HashMap<>();
        departments = new HashMap<>();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        dcClearOn = new datechooser.beans.DateChooserCombo();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taNotes = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        rbClear = new javax.swing.JRadioButton();
        cmbPaymentMode = new javax.swing.JComboBox();
        rbNotClear = new javax.swing.JRadioButton();
        cmbAccount = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        spAmount = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        dcTxnDate = new datechooser.beans.DateChooserCombo();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        txfPhone = new javax.swing.JTextField();
        txfVoucherNo = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        cmbDepartment = new javax.swing.JComboBox();
        cmbEmployee = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cmbTransactionType = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cmbMonth = new javax.swing.JComboBox();
        spYear = new javax.swing.JSpinner();
        jLabel17 = new javax.swing.JLabel();
        txfGrossSalary = new javax.swing.JTextField();
        spBonus = new javax.swing.JSpinner();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        spDeduction = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true), "Employee Transaction", 2, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true), "Transaction Infomartion"));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 102), 1, true), "Payment", 2, 0));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 0, 0));
        jLabel6.setText("Clear On*");

        dcClearOn.setFieldFont(new java.awt.Font("Times New Roman", java.awt.Font.PLAIN, 14));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 0, 0));
        jLabel5.setText("Date*");

        taNotes.setColumns(20);
        taNotes.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        taNotes.setRows(5);
        jScrollPane1.setViewportView(taNotes);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setText("Payment Mode*");

        rbClear.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        rbClear.setText("Clear");

        cmbPaymentMode.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbPaymentMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Account Type", "Bank", "Cash", "Card" }));
        cmbPaymentMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPaymentModeActionPerformed(evt);
            }
        });

        rbNotClear.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        rbNotClear.setText("Not Clear");

        cmbAccount.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setText("Account*");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 0));
        jLabel3.setText("Amount*");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 0, 0));
        jLabel7.setText("Status*");

        spAmount.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spAmount.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.5d)));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("Notes");

        dcTxnDate.setFieldFont(new java.awt.Font("Times New Roman", java.awt.Font.PLAIN, 14));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(16, 16, 16)
                                .addComponent(rbClear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbNotClear))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dcTxnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dcClearOn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(3, 3, 3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbAccount, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPaymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbPaymentMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcTxnDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcClearOn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbClear)
                    .addComponent(rbNotClear)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 102), 1, true), "Pay Slip", 2, 0));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel12.setText("Phone");

        txfPhone.setEditable(false);
        txfPhone.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        txfVoucherNo.setEditable(false);
        txfVoucherNo.setBackground(new java.awt.Color(255, 255, 255));
        txfVoucherNo.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 0, 0));
        jLabel9.setText("Voucher No*");

        jLabel11.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 0, 0));
        jLabel11.setText("Department*");

        cmbDepartment.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDepartmentActionPerformed(evt);
            }
        });

        cmbEmployee.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEmployeeActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 0, 0));
        jLabel13.setText("Employee*");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 0, 0));
        jLabel14.setText("Transaction Type*");

        cmbTransactionType.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbTransactionType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Transaction Type", "Salary", "Other" }));
        cmbTransactionType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTransactionTypeActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(102, 0, 0));
        jLabel15.setText("Year*");

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(102, 0, 0));
        jLabel16.setText("Month*");

        cmbMonth.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Month", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        cmbMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMonthActionPerformed(evt);
            }
        });

        spYear.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spYear.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2013), null, null, Integer.valueOf(1)));

        jLabel17.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel17.setText("Gross Salary*");

        txfGrossSalary.setEditable(false);
        txfGrossSalary.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        spBonus.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spBonus.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        spBonus.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spBonusStateChanged(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel18.setText("Bonus");

        jLabel19.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel19.setText("Deduction");

        spDeduction.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spDeduction.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        spDeduction.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spDeductionStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spYear, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfGrossSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTransactionType, 0, 178, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spDeduction, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txfPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txfVoucherNo, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(19, 19, 19))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txfVoucherNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTransactionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(spYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfGrossSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spBonus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(spDeduction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true));

        btnSave.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qbits/resources/image/Save-icon.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qbits/resources/image/Refresh-icon.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(257, 257, 257)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnReset))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void changeStatus(boolean status) {

        txfVoucherNo.setEnabled(status);
        taNotes.setEnabled(status);
        cmbAccount.setEnabled(status);
        cmbDepartment.setEnabled(status);
        cmbPaymentMode.setEnabled(status);
        dcClearOn.setEnabled(status);
        dcTxnDate.setEnabled(status);
        rbClear.setEnabled(status);
        rbNotClear.setEnabled(status);
        btnReset.setEnabled(status);
        btnSave.setEnabled(status);
        spAmount.setEnabled(status);
        changeStatusSalaryPanel(status);
    }

    private void changeStatusSalaryPanel(boolean status) {

        cmbMonth.setEnabled(status);
        spAmount.setEnabled(status);
        spDeduction.setEnabled(status);
        spBonus.setEnabled(status);
        spYear.setEnabled(status);

        spAmount.setEnabled(!status);
    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (!check()) {
            return;
        }

        new SwingWorker<Object, Object>() {
            @Override
            protected Object doInBackground() throws Exception {
                parentFrame.stausBar.startLoading("saving transaction");
                changeStatus(false);
                return save();
            }

            protected void done() {
                try {

                    parentFrame.stausBar.stopLoading();
                    changeStatus(true);

                    if (Integer.parseInt(get().toString()) == 1) {
                        parentFrame.showMessage("Employee transaction saved");
                        reset();
                    } else if (Integer.parseInt(get().toString()) == -1) {
                        parentFrame.showMessage("Unable to save transaction");
                    } else if (Integer.parseInt(get().toString()) == -2) {
                        Message.dbConnectFailed();
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(UIGeneralTransaction.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    Logger.getLogger(UIGeneralTransaction.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.execute();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void cmbPaymentModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPaymentModeActionPerformed
        // TODO add your handling code here:

        if (cmbPaymentMode.getSelectedIndex() == 0) {
            return;
        }

        new SwingWorker<Object, Object>() {
            @Override
            protected Object doInBackground() throws Exception {
                parentFrame.stausBar.startLoading("Loading accounts");
                return loadAccounts(cmbPaymentMode.getSelectedItem().toString());
            }

            protected void done() {
                try {
                    parentFrame.stausBar.stopLoading();

                    if (Integer.parseInt(get().toString()) == 1) {
                    } else if (Integer.parseInt(get().toString()) == -1) {
                        cmbPaymentMode.setSelectedIndex(0);
                        cmbAccount.removeAllItems();
                        parentFrame.showMessage("Unable to load accounts");
                    } else if (Integer.parseInt(get().toString()) == -2) {
                        cmbPaymentMode.setSelectedIndex(0);
                        cmbAccount.removeAllItems();
                        Message.dbConnectFailed();
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(UIGeneralTransaction.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    Logger.getLogger(UIGeneralTransaction.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.execute();
    }//GEN-LAST:event_cmbPaymentModeActionPerformed

    private void cmbDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDepartmentActionPerformed
        // TODO add your handling code here:

        if (cmbDepartment.getSelectedIndex() == 0) {
            txfPhone.setText("");
            cmbEmployee.removeAllItems();
            return;
        } else if (cmbDepartment.getSelectedIndex() > 0) {

            parentFrame.stausBar.startLoading("loading invoice...");

            new SwingWorker<Object, Object>() {
                @Override
                protected Object doInBackground() throws Exception {
                    changeStatus(false);
                    return loadEmployees(departments.get(cmbDepartment.getSelectedIndex()));
                }

                protected void done() {
                    try {

                        parentFrame.stausBar.stopLoading();
                        changeStatus(true);

                        if (Integer.parseInt(get().toString()) == 1) {
                        } else if (Integer.parseInt(get().toString()) == -1) {
                            parentFrame.showMessage("Unable to load accounts");
                        } else if (Integer.parseInt(get().toString()) == -2) {
                            Message.dbConnectFailed();
                        }

                    } catch (InterruptedException ex) {
                        Logger.getLogger(UISupplierTransaction.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ExecutionException ex) {
                        Logger.getLogger(UISupplierTransaction.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }.execute();


        }

    }//GEN-LAST:event_cmbDepartmentActionPerformed

    private void cmbEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEmployeeActionPerformed
        // TODO add your handling code here:
        if (cmbEmployee.getSelectedIndex() > 0) {
            txfPhone.setText(employees.get(cmbEmployee.getSelectedIndex()).getContactNo());
        } else {
            txfPhone.setText("");
        }
    }//GEN-LAST:event_cmbEmployeeActionPerformed

    private void updateTotalAmount() {

        double grossSalary = Double.parseDouble(txfGrossSalary.getText().trim());
        spAmount.setValue((grossSalary + Double.parseDouble(spBonus.getValue().toString()) - Double.parseDouble(spDeduction.getValue().toString())));
    }

    private void cmbTransactionTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTransactionTypeActionPerformed
        // TODO add your handling code here:

        if (cmbTransactionType.getSelectedIndex() == 1) {

            changeStatusSalaryPanel(true);

            Employee employee = employees.get(cmbEmployee.getSelectedIndex());
            Salary salary = employee.getSalary();
            double grossSalary = salary.getBasic() + salary.getConveyanceAllowance() + salary.getHouseRent()
                    + salary.getMedicalAllowance();

            grossSalary -= (salary.getIncomeTax() * .01 * salary.getBasic());
            grossSalary -= (salary.getProvidentFund() * .01 * salary.getBasic());

            txfGrossSalary.setText("" + grossSalary);
            updateTotalAmount();

        } else if (cmbTransactionType.getSelectedIndex() == 2) {
            changeStatusSalaryPanel(false);
            spAmount.setValue(0.0);
            txfGrossSalary.setText("0.00");
            cmbMonth.setSelectedIndex(0);
            spYear.setValue(2013);
            spBonus.setValue(0.00);
            spDeduction.setValue(0.00);
        }

    }//GEN-LAST:event_cmbTransactionTypeActionPerformed

    private void cmbMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMonthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMonthActionPerformed

    private void spBonusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spBonusStateChanged
        // TODO add your handling code here:
        updateTotalAmount();
    }//GEN-LAST:event_spBonusStateChanged

    private void spDeductionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spDeductionStateChanged
        // TODO add your handling code here:
        updateTotalAmount();
    }//GEN-LAST:event_spDeductionStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbAccount;
    private javax.swing.JComboBox cmbDepartment;
    private javax.swing.JComboBox cmbEmployee;
    private javax.swing.JComboBox cmbMonth;
    private javax.swing.JComboBox cmbPaymentMode;
    private javax.swing.JComboBox cmbTransactionType;
    private datechooser.beans.DateChooserCombo dcClearOn;
    private datechooser.beans.DateChooserCombo dcTxnDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbClear;
    private javax.swing.JRadioButton rbNotClear;
    private javax.swing.JSpinner spAmount;
    private javax.swing.JSpinner spBonus;
    private javax.swing.JSpinner spDeduction;
    private javax.swing.JSpinner spYear;
    private javax.swing.JTextArea taNotes;
    private javax.swing.JTextField txfGrossSalary;
    private javax.swing.JTextField txfPhone;
    private javax.swing.JTextField txfVoucherNo;
    // End of variables declaration//GEN-END:variables

    private boolean check() {


        if (cmbDepartment.getSelectedIndex() == 0) {
            parentFrame.showMessage("Please select principle");
            return false;
        }


        if (cmbPaymentMode.getSelectedIndex() == 0) {
            parentFrame.showMessage("Please select account type");
            return false;
        }

        if (cmbAccount.getSelectedIndex() == 0) {
            parentFrame.showMessage("Please select account");
            return false;
        }

        if ((Double) (spAmount.getValue()) <= 0) {
            parentFrame.showMessage("Please select valid amount");
            return false;
        }

        if (!rbClear.isSelected() && !rbNotClear.isSelected()) {
            parentFrame.showMessage("Please select status");
            return false;
        }

        if (!Utilities.isValidString(txfVoucherNo.getText())) {
            parentFrame.showMessage("Please enter voucher no");
            return false;
        }

        if (cmbTransactionType.getSelectedIndex() == 0) {
            parentFrame.showMessage("Please select Transaction Type");
            return false;
        }

        if (cmbPaymentMode.getSelectedItem().toString().compareTo("Bank") == 0 && !rbClear.isSelected() && !rbNotClear.isSelected()) {
            parentFrame.showMessage("Please select status");
            return false;
        }

        return true;
    }

    private int save() {

        MySQLDatabase database = new MySQLDatabase();
        String query = "";
        Employee employee;
        QueryBuilder queryBuilder = new QueryBuilder();

        if (database.connect()) {

            database.setAutoCommit(false);

            if (cmbEmployee.getSelectedIndex() > 0) {
                employee = employees.get(cmbEmployee.getSelectedIndex());
            } else {
                return -1;
            }

            long txnID = 1;

            if (cmbTransactionType.getSelectedIndex() == 1) {

                queryBuilder.clear();
                queryBuilder.set("employee_id", "" + employee.getCustomerID());
                queryBuilder.set("salary_id", "" + employee.getSalary().getSalaryID());
                queryBuilder.setString("voucher_no", "" + txfVoucherNo.getText());
                queryBuilder.setString("transaction_date", "" + Utilities.dateForDB(dcTxnDate.getSelectedDate().getTime()));
                queryBuilder.setString("clear_on", "" + Utilities.dateForDB(dcClearOn.getSelectedDate().getTime()));
                queryBuilder.set("is_clear", "" + rbClear.isSelected());
                queryBuilder.setString("month", cmbMonth.getSelectedItem().toString());
                queryBuilder.set("year", "" + spYear.getValue());
                queryBuilder.set("gross_salary", "" + spAmount.getValue());
                queryBuilder.set("income_tax", "" + employee.getSalary().getBasic() * .01 * employee.getSalary().getIncomeTax());
                queryBuilder.set("provident_fund", "" + employee.getSalary().getBasic() * .01 * employee.getSalary().getProvidentFund());
                queryBuilder.set("bonus", "" + spBonus.getValue());
                queryBuilder.set("deduction", "" + spDeduction.getValue());
                queryBuilder.set("account_id", "" + accounts.get(cmbAccount.getSelectedItem().toString()));
                queryBuilder.setString("notes", taNotes.getText());
                queryBuilder.set("last_updated_by", "" + parentFrame.currentUser.getUserID());
                queryBuilder.set("last_update_time", "NOW()");

                txnID = database.insert(queryBuilder.insert("employee_salary_transaction"));

            } else if (cmbTransactionType.getSelectedIndex() == 2) {

                queryBuilder.clear();
                queryBuilder.set("employee_id", "" + employee.getCustomerID());
                queryBuilder.setString("voucher_no", "" + txfVoucherNo.getText());
                queryBuilder.set("amount", "" + spAmount.getValue());
                queryBuilder.setString("txn_date", "" + Utilities.dateForDB(dcTxnDate.getSelectedDate().getTime()));
                queryBuilder.setString("clear_on", "" + Utilities.dateForDB(dcClearOn.getSelectedDate().getTime()));
                queryBuilder.set("is_clear", "" + rbClear.isSelected());
                queryBuilder.setString("notes", taNotes.getText());
                queryBuilder.set("account_id", "" + accounts.get(cmbAccount.getSelectedItem().toString()));
                queryBuilder.set("last_updated_by", "" + parentFrame.currentUser.getUserID());
                queryBuilder.set("last_updated_time", "NOW()");

                txnID = database.insert(queryBuilder.insert("employee_general_transaction"));
            }

            if (txnID == -1) {
                database.rollback();
                database.setAutoCommit(true);
                database.disconnect();
                return -1;
            }

            query = "UPDATE voucher_tracker SET count = count + 1 WHERE title =\"employee_transaction\"";

            if (database.update(query) <= 0) {
                database.rollback();
                database.setAutoCommit(true);
                database.disconnect();
                return -1;
            }

            database.commit();
            database.setAutoCommit(true);
            database.disconnect();
            return 1;

        } else {
            return -2;
        }
    }

    private void reset() {

        new SwingWorker<Object, Object>() {
            @Override
            protected Object doInBackground() throws Exception {

                cmbPaymentMode.setSelectedIndex(0);
                cmbAccount.removeAllItems();
                spAmount.setValue(0.0);
                dcTxnDate.setSelectedDate(Calendar.getInstance());
                dcClearOn.setSelectedDate(Calendar.getInstance());
                rbClear.setSelected(true);
                taNotes.setText("");
                spBonus.setValue(0.00);
                spDeduction.setValue(0.00);
                spYear.setValue(2013);
                txfPhone.setText("");
                txfGrossSalary.setText("");

                loadDepartment();
                parentFrame.stausBar.startLoading("generating voucher no");
                String voucherNo = getVoucherNo();

                if (voucherNo.length() == 0) {
                    return -1;
                } else {
                    txfVoucherNo.setText(voucherNo);
                    return 1;
                }
            }

            protected void done() {
                parentFrame.stausBar.stopLoading();
            }
        }.execute();
    }

    private int loadAccounts(String accountType) {

        MySQLDatabase database = new MySQLDatabase();
        Vector<String> accountTitles = new Vector<>();
        String query;
        accounts.clear();
        accountTitles.add("Select Account");
        int status = -1;

        if (database.connect()) {

            query = "SELECT * FROM account WHERE type =\"" + accountType + "\" AND status = 1 ORDER BY id";

            ResultSet resultSet = database.get(query);

            try {
                while (resultSet.next()) {
                    accounts.put(resultSet.getString("title"), resultSet.getInt("id"));
                    accountTitles.add(resultSet.getString("title"));
                }

                cmbAccount.setModel(new DefaultComboBoxModel(accountTitles));
                status = 1;

            } catch (SQLException ex) {
                Logger.getLogger(UIGeneralTransaction.class.getName()).log(Level.SEVERE, null, ex);
                accounts.clear();
                status = -1;
            } finally {
                database.disconnect();
            }

        } else {
            status = -2;
        }

        return status;
    }

    private int loadAccountHeads(String principleType) {

        MySQLDatabase database = new MySQLDatabase();
        Vector<String> accountHeadTitles = new Vector<>();
        String query;
        accountHead.clear();
        accountHeadTitles.add("Select Account Head");
        int status = -1;

        if (database.connect()) {

            query = "SELECT * FROM account_head WHERE principle =\"" + principleType + "\" AND status = 1 ORDER BY id";

            ResultSet resultSet = database.get(query);

            try {
                while (resultSet.next()) {
                    accountHead.put(resultSet.getString("title"), resultSet.getInt("id"));
                    accountHeadTitles.add(resultSet.getString("title"));
                }

//                cmbAccountHead.setModel(new DefaultComboBoxModel(accountHeadTitles));
                status = 1;

            } catch (SQLException ex) {
                Logger.getLogger(UIGeneralTransaction.class.getName()).log(Level.SEVERE, null, ex);
                accounts.clear();
                status = -1;
            } finally {
                database.disconnect();
            }

        } else {
            status = -2;
        }

        return status;
    }

    private String getVoucherNo() {

        String voucherType = "employee_transaction";
        String query;
        String voucherNo = "";

        MySQLDatabase database = new MySQLDatabase();

        if (database.connect()) {

            query = "SELECT count FROM voucher_tracker WHERE title = \"" + voucherType + "\"";
            ResultSet resultSet = database.get(query);

            try {
                if (resultSet.next()) {
                    voucherNo = "" + (resultSet.getInt("count") + 1);
                } else {
                    parentFrame.showMessage("Unable to generate voucher no");
                    txfVoucherNo.setEditable(true);
                    voucherNo = "";
                }
            } catch (SQLException ex) {
                Logger.getLogger(UIGeneralTransaction.class.getName()).log(Level.SEVERE, null, ex);
                parentFrame.showMessage("Unable to generate voucher no");
                txfVoucherNo.setEditable(true);
                voucherNo = "";
            } finally {
                database.disconnect();
            }

            return voucherNo;

        } else {
            parentFrame.showMessage("Unable to connect with database");
            txfVoucherNo.setEditable(true);
            return "";
        }
    }

    private int loadEmployees(int departmentID) {

        int status = 0;
        MySQLDatabase database = new MySQLDatabase();
        QueryBuilder query = new QueryBuilder();
        Vector<String> employeeNames = new Vector<>();
        employees.clear();
        cmbEmployee.removeAllItems();
        employeeNames.add("Select Employee");

        if (database.connect()) {

            try {

                query.clear();

                query.select("employee.employee_id, person.first_name, person.last_name, person.gender, person.contact_no");
                query.select("employee.salary_id, employee_salary.basic, employee_salary.house_rent_allowance, employee_salary.medical_allowance, employee_salary.conveyance_allowance, employee_salary.income_tax, employee_salary.provident_fund");
                query.from("employee");
                query.innerJoin("person", "person.person_id = employee.person_id");
                query.innerJoin("employee_salary", "employee_salary.employee_salary_id = employee.salary_id");
                query.where("employee.department_id = " + departmentID);

                ResultSet resultSet = database.get(query.get());

                while (resultSet.next()) {

                    Employee employee = new Employee();
                    employee.setCustomerID(resultSet.getInt("employee.employee_id"));
                    employee.setFirstName(resultSet.getString("person.first_name"));
                    employee.setLastName(resultSet.getString("person.last_name"));
                    employee.setContactNo(resultSet.getString("person.contact_no"));
                    employee.getSalary().setBasic(resultSet.getDouble("employee_salary.basic"));
                    employee.getSalary().setConveyanceAllowance(resultSet.getDouble("employee_salary.conveyance_allowance"));
                    employee.getSalary().setHouseRent(resultSet.getDouble("employee_salary.house_rent_allowance"));
                    employee.getSalary().setIncomeTax(resultSet.getDouble("employee_salary.income_tax"));
                    employee.getSalary().setMedicalAllowance(resultSet.getDouble("employee_salary.medical_allowance"));
                    employee.getSalary().setProvidentFund(resultSet.getDouble("employee_salary.provident_fund"));
                    employee.getSalary().setSalaryID(resultSet.getInt("employee.salary_id"));

                    employees.put(employeeNames.size(), employee);
                    employeeNames.add(employee.getFirstName() + " " + employee.getLastName());
                }

                cmbEmployee.setModel(new DefaultComboBoxModel(employeeNames));
                status = 1;

            } catch (SQLException ex) {
                status = -1;
                Logger.getLogger(UISupplierTransaction.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                database.disconnect();
            }
        } else {
            status = -2;
        }

        return status;

    }

    private void loadDepartment() {

        Vector<String> deptNames = new Vector<>();
        MySQLDatabase database = new MySQLDatabase();
        QueryBuilder query = new QueryBuilder();

        cmbDepartment.removeAllItems();
        departments.clear();

        if (database.connect()) {
            try {
                query.select("*");
                query.from("employee_department");

                ResultSet resultSet = database.get(query.get());
                deptNames.add("Select Department");

                while (resultSet.next()) {

                    departments.put(deptNames.size(), resultSet.getInt("department_id"));
                    deptNames.add(resultSet.getString("title"));
                }

                cmbDepartment.setModel(new DefaultComboBoxModel(deptNames));

            } catch (SQLException ex) {
                Logger.getLogger(UIEmployee.class.getName()).log(Level.SEVERE, null, ex);
            }


        } else {
            parentFrame.showMessage("Unable to load departments");
        }
    }
}
