/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package qbits.gui.purchase.product;

import com.mysql.jdbc.MySQLConnection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.UUID;
import java.util.Vector;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.SwingWorker;
import qbits.configuration.Configuration;
import qbits.configuration.Utilities;
import qbits.db.MySQLDatabase;
import qbits.db.QueryBuilder;
import qbits.entity.ProductSearch;
import qbits.gui.common.UIParentFrame;
import qbitserp.common.Message;

/**
 *
 * @author Topu
 */
public class UIProduct extends javax.swing.JPanel {

    private UIParentFrame parentFrame;
    private boolean isUpdate;
    private HashMap<String, Integer> categories;
    private HashMap<String, Integer> brands;
    private HashMap<String, Integer> units;

    /**
     * Creates new form UIProduct
     */
    public UIProduct(UIParentFrame frame) {
        initComponents();
        chkAvgCost.setVisible(false);
        this.parentFrame = frame;
        isUpdate = false;
        categories = new HashMap<>();
        brands = new HashMap<>();
        units = new HashMap<>();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txfName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txfCode = new javax.swing.JTextField();
        cmbCategory = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        btnGenerateProductCode = new javax.swing.JButton();
        cmbBrand = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmbUnit = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        spRPU = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        spNotifyQuantity = new javax.swing.JSpinner();
        chkAvgCost = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        spOpeningQuantity = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        spCostPerUnit = new javax.swing.JSpinner();
        jPanel3 = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true), "Product", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true), "Product Information"));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setText("Product Name*");

        txfName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txfName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfNameActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 0, 0));
        jLabel2.setText("Product Code*");

        txfCode.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txfCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfCodeActionPerformed(evt);
            }
        });

        cmbCategory.setEditable(true);
        cmbCategory.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 0, 0));
        jLabel3.setText("Product Category*");

        btnGenerateProductCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qbits/resources/image/Search-icon.png"))); // NOI18N
        btnGenerateProductCode.setToolTipText("Click to generate product code");
        btnGenerateProductCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateProductCodeActionPerformed(evt);
            }
        });

        cmbBrand.setEditable(true);
        cmbBrand.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbBrand.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 0, 0));
        jLabel4.setText("Product Brand*");

        cmbUnit.setEditable(true);
        cmbUnit.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 0, 0));
        jLabel5.setText("Product Unit*");

        spRPU.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spRPU.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.5d)));

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 0, 0));
        jLabel6.setText("Sale Rate Per Unit*");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel7.setText("Notify Quantity");

        spNotifyQuantity.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spNotifyQuantity.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.5d)));

        chkAvgCost.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        chkAvgCost.setSelected(true);
        chkAvgCost.setText("Use Average Cost");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbUnit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbBrand, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbCategory, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txfCode)
                            .addComponent(txfName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerateProductCode, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(spRPU, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkAvgCost)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spNotifyQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(193, 193, 193))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnGenerateProductCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spRPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(chkAvgCost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spNotifyQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true), "Opening Stock"));

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel8.setText("Quantity");

        spOpeningQuantity.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spOpeningQuantity.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.5d)));

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel9.setText("Cost Per Unit");

        spCostPerUnit.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        spCostPerUnit.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), Double.valueOf(0.0d), null, Double.valueOf(0.5d)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spCostPerUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spOpeningQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spOpeningQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spCostPerUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 255), 1, true));

        btnSave.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qbits/resources/image/Save-icon.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/qbits/resources/image/Refresh-icon.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset)
                .addGap(134, 134, 134))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnReset))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void changeStatus(boolean status) {

        txfCode.setEnabled(status);
        txfName.setEnabled(status);

        spCostPerUnit.setEnabled(status);
        spNotifyQuantity.setEnabled(status);
        spOpeningQuantity.setEnabled(status);
        spRPU.setEnabled(status);

        btnGenerateProductCode.setEnabled(status);
        btnReset.setEnabled(status);
        btnSave.setEnabled(status);

        chkAvgCost.setEnabled(status);
    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if (!check()) {
            return;
        }

        new SwingWorker<Object, Object>() {
            @Override
            protected Object doInBackground() throws Exception {
                parentFrame.stausBar.startLoading("saving product");
                changeStatus(false);

                if (isUpdate) {
                    return update();
                } else {
                    return save();
                }
            }

            protected void done() {
                try {
                    parentFrame.stausBar.stopLoading();
                    changeStatus(true);

                    if (get() == 1) {
                        reset();
                        parentFrame.showMessage("Product information saved");
                    } else if (get() == -1) {
                        parentFrame.showMessage("Unable to save Product information");
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(UIProduct.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ExecutionException ex) {
                    Logger.getLogger(UIProduct.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.execute();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnGenerateProductCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateProductCodeActionPerformed
        // TODO add your handling code here:
        txfCode.setText(generateProductCode());
    }//GEN-LAST:event_btnGenerateProductCodeActionPerformed

    private void txfNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfNameActionPerformed

    private void txfCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfCodeActionPerformed
        // TODO add your handling code here:
        ProductSearch productSearch = new ProductSearch();

        int productID = productSearch.getProductByCode(txfCode.getText().trim());

        if (productID != -1) {
            parentFrame.showMessage("This product already exists. Please provide different product code or leave this field system will generate product code for this product");
            txfCode.setText("");
        }
    }//GEN-LAST:event_txfCodeActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerateProductCode;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chkAvgCost;
    private javax.swing.JComboBox cmbBrand;
    private javax.swing.JComboBox cmbCategory;
    private javax.swing.JComboBox cmbUnit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSpinner spCostPerUnit;
    private javax.swing.JSpinner spNotifyQuantity;
    private javax.swing.JSpinner spOpeningQuantity;
    private javax.swing.JSpinner spRPU;
    private javax.swing.JTextField txfCode;
    private javax.swing.JTextField txfName;
    // End of variables declaration//GEN-END:variables

    private boolean check() {

        if (!Utilities.isValidString(txfName.getText())) {
            parentFrame.showMessage("Please enter valid product name");
            return false;
        }
        if (cmbCategory.getSelectedIndex() == 0) {
            parentFrame.showMessage("Please select product category");
            return false;
        }

        if (cmbUnit.getSelectedIndex() == 0) {
            parentFrame.showMessage("Please select product unit");
            return false;
        }

        if (Double.parseDouble(spCostPerUnit.getValue().toString()) <= 0.00 && Message.confirm("Cost per unit: " + spCostPerUnit.getValue() + ". Do you want to continue?", "Warning") == 1) {
            return false;
        }

        return true;
    }

    private int save() {

        QueryBuilder queryBuilder = new QueryBuilder();
        MySQLDatabase database = new MySQLDatabase();
        String query;
        int status = -1;
        long catID = 0, brandID = 0, unitID = 0;
        String productCode;

        if (database.connect()) {

            database.setAutoCommit(false);

//            System.out.println(cmbBrand.getSelectedIndex() + " " + cmbBrand.getSelectedItem().toString());
//            System.out.println(cmbCategory.getSelectedIndex() + " " + cmbCategory.getSelectedItem().toString());
//            System.out.println(cmbUnit.getSelectedIndex() + " " + cmbUnit.getSelectedItem().toString());

            if (categories.containsKey(cmbCategory.getSelectedItem().toString())) {
                catID = categories.get(cmbCategory.getSelectedItem().toString());
            } else {

                query = "INSERT INTO product_category VALUES(null, \"" + cmbCategory.getSelectedItem().toString() + "\", 1)";
                catID = database.insert(query);

                if (catID == -1) {
                    database.setAutoCommit(true);
                    database.disconnect();
                    return -1;
                }

                queryBuilder.clear();
                queryBuilder.set("category_id", "" + catID);
                queryBuilder.set("category_code", "" + (catID + Configuration.BASE_CATEGORY_CODE));
                queryBuilder.set("total_product", "" + 0);

                if (database.insert(queryBuilder.insert("product_code")) == -1) {
                    database.rollback();
                    database.setAutoCommit(true);
                    database.disconnect();
                    return -1;
                }
            }

            if (units.containsKey(cmbUnit.getSelectedItem().toString())) {
                unitID = units.get(cmbUnit.getSelectedItem().toString());
            } else {

                query = "INSERT INTO product_unit VALUES(null, \"" + cmbUnit.getSelectedItem().toString() + "\", 1)";
                unitID = database.insert(query);

                if (unitID == -1) {
                    database.rollback();
                    database.setAutoCommit(true);
                    database.disconnect();
                    return -1;
                }
            }


            if (brands.containsKey(cmbBrand.getSelectedItem().toString())) {
                brandID = brands.get(cmbBrand.getSelectedItem().toString());
            } else {

                query = "INSERT INTO product_brand VALUES(null, \"" + cmbBrand.getSelectedItem().toString() + "\", 1)";
                brandID = database.insert(query);

                if (brandID == -1) {
                    database.rollback();
                    database.setAutoCommit(true);
                    database.disconnect();
                    return -1;
                }
            }

            if (!Utilities.isValidString(txfCode.getText())) {

                queryBuilder.clear();
                queryBuilder.select("total_product");
                queryBuilder.where("category_id = " + catID);
                queryBuilder.from("product_code");

                ResultSet resultSet = database.get(queryBuilder.get());

                try {

                    if (resultSet.next()) {

                        productCode = "";
                        int totalProduct = resultSet.getInt("total_product");
                        ProductSearch productSearch = new ProductSearch();
                        int maxCheck = 20;
                        int checkCount = 0;

                        while (checkCount < maxCheck) {

                            checkCount++;
                            productCode = "" + (catID + Configuration.BASE_CATEGORY_CODE) + "" + ((totalProduct + 1) + Configuration.BASE_PRODUCT_CODE);

                            if (productSearch.getProductByCode(productCode) == -1) {
                                break;
                            }

                            totalProduct++;
                            System.out.println(totalProduct);
                        }

                        if (checkCount >= maxCheck) {
                            database.rollback();
                            database.setAutoCommit(true);
                            database.disconnect();
                            return -1;
                        }

                        queryBuilder.clear();
                        queryBuilder.set("total_product", "total_product + " + totalProduct);
                        queryBuilder.where("category_id = " + catID);

                        if (database.update(queryBuilder.update("product_code")) == -1) {
                            database.rollback();
                            database.setAutoCommit(true);
                            database.disconnect();
                            return -1;
                        }

                    } else {
                        database.rollback();
                        database.setAutoCommit(true);
                        database.disconnect();
                        return -1;
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(UIProduct.class.getName()).log(Level.SEVERE, null, ex);
                    database.rollback();
                    database.setAutoCommit(true);
                    database.disconnect();
                    return -1;
                }

                txfCode.setText(productCode);

            } else {
                productCode = txfCode.getText();
            }

            query = "INSERT INTO product VALUES("
                    + "null, \"" + txfName.getText() + "\", \"" + productCode + "\", \"" + catID + "\", \"" + brandID + "\", \"" + unitID + "\""
                    + ", \"" + spRPU.getValue() + "\", \"" + spNotifyQuantity.getValue() + "\", " + chkAvgCost.isSelected() + ", " + parentFrame.currentUser.getUserID() + ", NOW()"
                    + ")";

            long productID = database.insert(query);

            if (productID == -1) {
                database.rollback();
                database.setAutoCommit(true);
                database.disconnect();
                return -1;
            }

            query = "INSERT INTO product_stock VALUES(null"
                    + ", " + productID + ", -1, " + spOpeningQuantity.getValue() + ", " + spCostPerUnit.getValue() + ", CURDATE()"
                    + ", " + parentFrame.currentUser.getUserID() + ", NOW()"
                    + ")";

            long stockID = database.insert(query);

            if (stockID == -1) {
                database.rollback();
                status = -1;
            } else {
                database.commit();
                status = 1;
            }

            database.setAutoCommit(true);
            database.disconnect();

        } else {
            status = -2;
        }

        return status;
    }

    private boolean update() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void reset() {

        txfCode.setText("");
        txfName.setText("");

        spCostPerUnit.setValue(0);
        spNotifyQuantity.setValue(0);
        spOpeningQuantity.setValue(0);
        spRPU.setValue(0);

        chkAvgCost.setSelected(true);

        loadCategory();
        loadBrand();
        loadUnit();
    }

    private void load(int productID) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void loadCategory() {

        MySQLDatabase database = new MySQLDatabase();
        String query;
        Vector<String> categoryTitles = new Vector<>();
        categories.clear();
        categoryTitles.add("Select Category");

        if (database.connect()) {
            try {
                query = "SELECT * FROM product_category WHERE status = 1";
                ResultSet resultSet = database.get(query);

                while (resultSet.next()) {
                    categories.put(resultSet.getString("title"), resultSet.getInt("category_id"));
                    categoryTitles.add(resultSet.getString("title"));
                }

                cmbCategory.setModel(new DefaultComboBoxModel(categoryTitles));

            } catch (SQLException ex) {
                Logger.getLogger(UIProduct.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                database.disconnect();
            }
        }
    }

    private void loadBrand() {

        MySQLDatabase database = new MySQLDatabase();
        String query;
        Vector<String> brandTitles = new Vector<>();
        brands.clear();
        brandTitles.add("Select Brand");

        if (database.connect()) {
            try {
                query = "SELECT * FROM product_brand WHERE status = 1";
                ResultSet resultSet = database.get(query);

                while (resultSet.next()) {
                    brands.put(resultSet.getString("title"), resultSet.getInt("brand_id"));
                    brandTitles.add(resultSet.getString("title"));
                }

                cmbBrand.setModel(new DefaultComboBoxModel(brandTitles));

            } catch (SQLException ex) {
                Logger.getLogger(UIProduct.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                database.disconnect();
            }
        }
    }

    private void loadUnit() {

        MySQLDatabase database = new MySQLDatabase();
        String query;
        Vector<String> unitTitles = new Vector<>();
        units.clear();
        unitTitles.add("Select Unit");

        if (database.connect()) {
            try {
                query = "SELECT * FROM product_unit WHERE status = 1";
                ResultSet resultSet = database.get(query);

                while (resultSet.next()) {
                    units.put(resultSet.getString("title"), resultSet.getInt("unit_id"));
                    unitTitles.add(resultSet.getString("title"));
                }

                cmbUnit.setModel(new DefaultComboBoxModel(unitTitles));

            } catch (SQLException ex) {
                Logger.getLogger(UIProduct.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                database.disconnect();
            }
        }
    }

    private String generateProductCode() {
        return UUID.randomUUID().toString();

    }

    private int isProductCodeExists(String productCode) {

        MySQLDatabase database = new MySQLDatabase();
        String query;

        if (database.connect()) {
            try {
                query = "SELECT product_id FROM product WHERE product_code =\"" + productCode + "\"";

                ResultSet resultSet = database.get(query);

                if (resultSet.next()) {
                    return resultSet.getInt("product_id");
                } else {
                    return 0;
                }

            } catch (SQLException ex) {
                Logger.getLogger(UIProduct.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                database.disconnect();
            }

            return -1;

        } else {
            return -2;
        }

    }
}
